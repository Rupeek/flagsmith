name: Platform Pull Requests

on:
    pull_request:
        types: [opened, synchronize, reopened, ready_for_review]

jobs:
    run-e2e-tests:
        if: github.event.pull_request.draft == false
        runs-on: ubuntu-latest
        name: Full E2E tests

        services:
            postgres:
                image: postgres:11.12-alpine
                env:
                    POSTGRES_USER: postgres
                    POSTGRES_PASSWORD: postgres
                    POSTGRES_DB: flagsmith
                ports: ['5432:5432']
                options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

        steps:
            - name: Cloning repo
              uses: actions/checkout@v2
              with:
                  fetch-depth: 0

            - name: Cache npm
              uses: actions/cache@v2
              with:
                  path: frontend/node_modules
                  key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-node-

            - name: Set up Python 3.8
              uses: actions/setup-python@v2
              with:
                  python-version: 3.8

            - name: Copy pip requirements
              run: |
                  cp api/requirements.txt .

            - name: Restore VirtualEnv from cache
              uses: syphar/restore-virtualenv@v1.2
              id: cache-e2e-api

            - name: Restore Pip from cache
              uses: syphar/restore-pip-download-cache@v1
              if: steps.cache-e2e-api.outputs.cache-hit != 'true'

            - name: Install Dependencies
              if: steps.cache-e2e-api.outputs.cache-hit != 'true'
              run: |
                  python -m pip install --upgrade pip
                  pip install -r requirements.txt

            - name: Run API
              working-directory: api
              env:
                  E2E_TEST_AUTH_TOKEN: some-token
                  DJANGO_ALLOWED_HOSTS: '*'
                  DATABASE_URL: postgres://postgres:postgres@localhost:5432/flagsmith
                  SENDGRID_API_KEY: ${{ secrets.SENDGRID_API_KEY }}
                  DJANGO_SETTINGS_MODULE: app.settings.test
                  FE_E2E_TEST_USER_EMAIL: nightwatch@solidstategroup.com
                  SENTRY_SDK_DSN: ${{ secrets.SENTRY_SDK_DSN }}
              run: |
                  python manage.py migrate
                  python manage.py runserver &

            - name: Run E2E tests against local
              uses: ./.github/actions/e2e-tests
              with:
                e2e_test_token: some-token
                slack_token: ${{ secrets.SLACK_TOKEN }}
                environment: local
                enable_influxdb_features: false

    docker-build-unified:
        if: github.event.pull_request.draft == false
        name: Test unified docker image build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v2

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Build
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  push: false
                  tags: flagsmith/flagsmith:testing

    docker-build-api:
        if: github.event.pull_request.draft == false
        name: Test api docker image build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v2

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Build
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  file: api/Dockerfile
                  context: api/
                  push: false
                  tags: flagsmith/flagsmith-api:testing

    docker-build-frontend:
        if: github.event.pull_request.draft == false
        name: Test frontend docker image build
        runs-on: ubuntu-latest

        steps:
            - name: Checkout PR branch
              uses: actions/checkout@v2

            - name: Set up QEMU
              uses: docker/setup-qemu-action@v1

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v1

            - name: Build
              id: docker_build
              uses: docker/build-push-action@v2
              with:
                  file: frontend/Dockerfile
                  context: frontend/
                  push: false
                  tags: flagsmith/flagsmith-frontend:testing
